interface IAssertionResult<T> {
  pass: boolean;
  actual: unknown;
  expected: T;
  description: string;
  operator: string;
  at?: string;
}

interface INewTestMessageInput {
  description: string;
  skip: boolean;
}

interface ITestEndMessageInput {
  description: string;
  executionTime: number;
}

interface IMessage<T> {
  type: string;
  data: T;
}

interface INewTestMessage extends IMessage<INewTestMessageInput> {
  type: 'TEST_START';
}

interface IAssertionMessage extends IMessage<IAssertionResult<unknown>> {
  type: 'ASSERTION';
}

interface ITestEndMessage extends IMessage<ITestEndMessageInput> {
  type: 'TEST_END';
}

interface IErrorMessage extends IMessage<{ error: unknown }> {
  type: 'ERROR';
}

type Message =
  | IAssertionMessage
  | IErrorMessage
  | ITestEndMessage
  | INewTestMessage;

declare function newTestMessage(
  opts: INewTestMessageInput
): INewTestMessage;

declare function assertionMessage(
  opts: IAssertionResult<unknown>
): IAssertionMessage;

declare function testEndMessage(
  opts: INewTestMessageInput
): ITestEndMessage;

declare function errorMessage(opts: { error: unknown }): IErrorMessage;

interface IReporter {
  (messageStream: AsyncIterable<Message>): Promise<void>;
}

interface ILogOptions {
  log?: (message: any) => void;
  serialize?: (value: any) => string;
}

declare function createJSONReporter(opts?: ILogOptions): IReporter;

declare function createTAPReporter(opts?: ILogOptions): IReporter;

declare function createDiffReporter(): IReporter;

export { ILogOptions, IReporter, Message, assertionMessage, createDiffReporter, createJSONReporter, createTAPReporter, errorMessage, newTestMessage, testEndMessage };
